// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // for local development
  // url       = env("DATABASE_URL")
  // for Vercel
   url       = env("POSTGRES_PRISMA_URL")
   directUrl = env("POSTGRES_URL_NON_POOLING")
}

// --- Enums ---

// Define User Roles
enum Role {
  USER
  ADMIN
}

// User Submission Status
enum ContentStatus {
  PENDING
  APPROVED
  REJECTED
}

// User Housing Status
enum HousingStatus {
  ON_CAMPUS_DORM
  ON_CAMPUS_APT
  OFF_CAMPUS
  COMMUTER
  WITH_FAMILY
  OTHER
}

// Event Attendance Type
enum AttendanceType {
  IN_PERSON
  ONLINE
  HYBRID
}

// --- Models ---

model User {
  id                   String         @id @default(cuid())

  // --- Authentication & Basic Info ---
  googleId             String?        @unique // From Google OAuth
  email                String         @unique // Primary identifier
  username             String?        @unique // Optional username for non-OAuth signup
  password             String?        // Hashed password for email/password signup (nullable for OAuth-only users)
  name                 String?        // Full name, potentially from Google or profile
  firstName            String?
  lastName             String?
  avatarUrl            String?        // Profile picture URL
  emailVerified        DateTime?      // For NextAuth email verification flows

  // --- Profile & Preferences ---
  major                String?
  graduationYear       Int?
  origin               String?        // e.g., hometown, state, country
  housingStatus        HousingStatus?
  comfortLevel         Int?           // User's self-reported comfort level (meaning TBD)
  onboardingComplete   Boolean        @default(false) // Replaces hasOnboarded
  emailNotifications   Boolean        @default(true)
  about_me             String?
  age_range            String?

  // --- Application Specific ---
  role                 Role           @default(USER)
  isAdmin              Boolean        @default(false) // Explicit admin flag

  // --- Timestamps ---
  createdAt            DateTime       @default(now())

  // --- Relationships ---
  accounts             Account[]      // For NextAuth provider linking
  sessions             Session[]      // For NextAuth active sessions
  interests            UserInterest[] // User's selected interests
  submittedClubs       Club[]         @relation("SubmittedByUser")
  submittedEvents      Event[]        @relation("SubmittedByUser")
  followedClubs        Club[]         @relation("UserFollowedClubs") // Clubs the user follows/favorites
  rsvps                RSVP[]         // Re-added: Events the user has RSVPed to
}

// --- NextAuth Required Models ---
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String // e.g., "google", "credentials"
  providerAccountId String // ID from the provider (e.g., Google subject ID)
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// --- End NextAuth Models ---

model Category {
  id            String          @id @default(cuid())
  name          String          @unique // e.g., "Sports", "Technology", "Arts", "Community Service"
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relationships
  clubs         ClubCategory[]
  events        EventCategory[]
  userInterests UserInterest[]
}

model Club {
  id                   String         @id @default(cuid())

  // --- Core Club Details ---
  name                 String         @unique // Unique name of the club
  logoUrl              String?        // Optional URL to a logo image file
  purpose              String         @db.Text // Core purpose/mission statement (required)
  categoryDescription  String?        // From schema2, use instead of single category field? Maybe store primary category via relation?
                                      // Using category relation instead based on Plan

  // --- Contact & Online Presence ---
  primaryContactName String?        // Name of the main student contact
  contactEmail       String?        // Contact email address
  websiteUrl         String?        // Optional official club website URL
  instagramUrl       String?        // Optional Instagram profile URL
  facebookUrl        String?        // Optional Facebook page URL
  twitterUrl         String?        // Optional Twitter profile URL

  // --- Operational Information ---
  meetingTime        String?        // Text description
  meetingLocation    String?        // Text description
  joinInfo           String?        @db.Text // Optional text describing how to join the club

  // --- Submission & Admin ---
  status             ContentStatus  @default(PENDING)
  submittedByUserId  String?        // Link to the user who submitted it (optional)

  // --- Timestamps ---
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // --- Relationships ---
  submittedBy        User?          @relation("SubmittedByUser", fields: [submittedByUserId], references: [id], onDelete: SetNull) // SetNull so deleting user doesn't delete club
  categories         ClubCategory[] // Categories assigned to this club
  hostedEvents       Event[]        @relation("OrganizedEvents") // Events hosted by this club
  favoritedBy        User[]         @relation("UserFollowedClubs") // Users following this club

  @@index([submittedByUserId])
}

model Event {
  id                   String          @id @default(cuid()) // Changed from VarChar based on scraping

  // --- Core Event Details ---
  title                String
  startDateTime        DateTime        // Stored with Time Zone (e.g., HST)
  endDateTime          DateTime?       // Nullable for all-day or TBD events
  allDay               Boolean?        @default(false)
  description          String?         @db.Text
  categoryTags         String?         @db.Text // Comma-separated string or JSON for tags/categories (consider relation instead)
                                                // Using category relation instead based on Plan
  costAdmission        String?         // Store as text due to variability

  // --- Location Information ---
  attendanceType       AttendanceType  @default(IN_PERSON)
  location             String?         @db.Text // Raw location string
  locationVirtualUrl   String?         @db.Text // Parsed Zoom/online link

  // --- Organizer & Contact Info ---
  organizerSponsor     String?         // Name of the organizing unit
  contactName          String?
  contactPhone         String?
  contactEmail         String?

  // --- Links ---
  eventUrl             String?         @db.Text // Link to the event detail page on hawaii.edu (optional now)
  eventPageUrl         String?         @db.Text // Link from 'More Information' section

  // --- Admin & Submission ---
  status               ContentStatus   @default(PENDING)
  submittedByUserId    String?

  // --- Timestamps ---
  lastScrapedAt        DateTime?       // Tracks when the record was last scraped/verified (optional)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // --- Relationships ---
  submittedBy          User?           @relation("SubmittedByUser", fields: [submittedByUserId], references: [id], onDelete: SetNull)
  categories           EventCategory[]
  organizerClubId      String?
  organizerClub        Club?           @relation("OrganizedEvents", fields: [organizerClubId], references: [id], onDelete: SetNull) // SetNull so deleting club doesn't delete event
  rsvps                RSVP[]          // Re-added: RSVPs for this event

  // --- Indexes ---
  @@index([startDateTime])
  @@index([submittedByUserId])
  @@index([organizerClubId])
}

model Job {
  id        String   @id @default(cuid())
  type      JobType // Type of job (e.g., EVENT_SCRAPE, CLUB_SCRAPE)
  status    JobStatus @default(PENDING) // PENDING, RUNNING, COMPLETED, FAILED
  payload   Json?     // Optional: Store any specific data needed for the job
  result    Json?     // Optional: Store success output or error messages
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startedAt DateTime? // When processing began
  endedAt   DateTime? // When processing finished
}

enum JobType {
  EVENT_SCRAPE
  CLUB_SCRAPE
  // Add other job types here if needed
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// --- RSVP Model (Re-added) ---
model RSVP {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // Ensure a user can RSVP only once per event
  @@index([userId])
  @@index([eventId])
}

// --- Join Tables ---

// User <-> Category (Many-to-Many)
model UserInterest {
  userId     String
  categoryId String
  assignedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}

// Club <-> Category (Many-to-Many)
model ClubCategory {
  clubId     String
  categoryId String
  assignedAt DateTime @default(now())

  club       Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([clubId, categoryId])
  @@index([clubId])
  @@index([categoryId])
}

// Event <-> Category (Many-to-Many)
model EventCategory {
  eventId    String
  categoryId String
  assignedAt DateTime @default(now())

  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([eventId, categoryId])
  @@index([eventId])
  @@index([categoryId])
}
