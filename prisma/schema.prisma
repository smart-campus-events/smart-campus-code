// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

// OLD STUFF
enum Condition {
  excellent
  good
  fair
  poor
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition @default(good)
  owner     String
}

// --- Enums ---
// Define User Roles
enum Role {
  USER
  ADMIN
}

// User Submission Status
enum ContentStatus {
  PENDING
  APPROVED
  REJECTED
}

// User Housing Status
enum HousingStatus {
  ON_CAMPUS_DORM
  ON_CAMPUS_APT
  OFF_CAMPUS
  COMMUTER
  WITH_FAMILY
  OTHER
}

// Event Attendance Type
enum AttendanceType {
  IN_PERSON
  ONLINE
  HYBRID
}

// --- Models ---


model Event {
  // --- Identifiers ---
  event_id             String    @id @db.VarChar(255) // Extracted unique ID (e.g., from et_id or URL)

  // --- Core Event Details ---
  title                String    @db.VarChar(512)
  start_datetime       DateTime  @db.Timestamptz      // Stored with Time Zone (e.g., HST)
  end_datetime         DateTime? @db.Timestamptz      // Nullable for all-day or TBD events
  all_day              Boolean?  @default(false)       // Whether the event spans all day
  description          String?   @db.Text              // Event summary/details (nullable)
  category_tags        String?   @db.Text              // Comma-separated string or JSON for tags/categories (nullable)
  cost_admission       String?   @db.VarChar(255)      // Store as text due to variability (nullable)

  // --- Location Information ---
  attendance_type      AttendanceType                 @default(IN_PERSON)
  location        String?   @db.Text              // Raw location string
  location_virtual_url String?   @db.Text              // Parsed Zoom/online link (nullable)

  // --- Organizer & Contact Info ---
  organizer_sponsor    String?   @db.VarChar(512)      // Name of the organizing unit (nullable)
  contact_name         String?   @db.VarChar(255)      // Parsed contact name (nullable)
  contact_phone        String?   @db.VarChar(50)       // Parsed contact phone (nullable)
  contact_email        String?   @db.VarChar(255)      // Parsed contact email (nullable)

  // --- Links ---
  event_url            String    @db.Text              // Link to the event detail page on hawaii.edu
  event_page_url       String?   @db.Text              // Link from 'More Information' section (nullable)

  // --- Timestamps ---
  last_scraped_at      DateTime  @db.Timestamptz       // Tracks when the record was last scraped/verified
  created_at           DateTime  @default(now()) @db.Timestamptz // First insert timestamp
  updated_at           DateTime  @updatedAt @db.Timestamptz       // Last modified timestamp

  // --- Relationships ---
  rsvped_users         User[]     @relation("EventRsvps")       // Users who RSVP'd
  interests            Interest[] @relation("EventInterests")   // Interests related to this event

  // --- Organizer Club (Optional) ---
  organizer_club_id    String?
  organizer_club       Club?      @relation("OrganizedEvents", fields: [organizer_club_id], references: [id])

  // --- Indexes ---
  @@index([start_datetime])
}


model Club {
  // --- Identifiers & Timestamps ---
  id                   String    @id @default(cuid()) // Unique identifier (CUID recommended)
  created_at           DateTime  @default(now())      // Timestamp of record creation
  updated_at           DateTime  @updatedAt           // Timestamp of last record update

  // --- Core Club Details ---
  name                 String    @unique              // Unique name of the club
  logo_url             String?                        // Optional URL to a logo image file
  purpose              String                         // Core purpose/mission statement (required)
  category             String                         // Classification (e.g., Academic, Social, Sports)

  // --- Contact & Online Presence ---
  primary_contact_name String                         // Name of the main student contact
  contact_email        String                         // Contact email address
  website_url          String?                        // Optional official club website URL
  instagram_url        String?                        // Optional Instagram profile URL
  facebook_url         String?                        // Optional Facebook page URL
  twitter_url          String?                        // Optional Twitter profile URL

  // --- Operational Information ---
  meeting_time         String?
  meeting_location     String?                        // Optional text describing meeting times/locations
  join_info            String?                        // Optional text describing how to join the club

  // --- Relationships (Updated) ---
  followers User[]     @relation("UserFollowedClubs") // Users following this club
  interests Interest[] @relation("ClubInterests")   // Interests related to this club - Added Relationship

  // Link to organized Events
  organized_events Event[] @relation("OrganizedEvents")

  // --- Indexes (Example) ---
  // @@index([category]) // Example: Add database index for faster lookups by category
}

model Interest {
  id         String    @id @default(cuid())
  name       String    @unique

  // --- Relationships ---
  users      User[]    @relation("UserInterests") // Users with this interest
  clubs      Club[]    @relation("ClubInterests") // Clubs related to this interest
  events     Event[]   @relation("EventInterests") // Events related to this interest

  // --- Timestamps ---
  created_at DateTime  @default(now()) @db.Timestamptz(6) @map("created_at")
  updated_at DateTime  @updatedAt      @db.Timestamptz(6) @map("updated_at")
}

model User {
  id                   String         @id @default(cuid())

  // --- Authentication & Basic Info ---
  google_id            String?        @unique @map("google_id")
  email                String         @unique
  name                 String?
  first_name           String?        @map("first_name")
  last_name            String?        @map("last_name")
  avatar_url           String?        @map("avatar_url")
  password             String

  // --- Profile & Preferences ---
  major                String?
  graduation_year      Int?           @map("graduation_year")
  origin               String?
  housing_status       HousingStatus? @map("housing_status") // ‚Üê Now using enum
  comfort_level        Int?           @map("comfort_level")
  onboarding_complete  Boolean        @default(false) @map("onboarding_complete")
  email_notifications  Boolean        @default(true)  @map("email_notifications")
  about_me             String?
  age_range            String?

  // --- Application Specific ---
  role                 Role       @default(USER)

  // --- Relationships ---
  interests            Interest[]     @relation("UserInterests")
  rsvped_events        Event[]        @relation("EventRsvps")
  followed_clubs       Club[]         @relation("UserFollowedClubs")

  // --- Timestamps ---
  created_at           DateTime       @default(now()) @db.Timestamptz(6) @map("created_at")
  updated_at           DateTime       @updatedAt      @db.Timestamptz(6) @map("updated_at")
}
